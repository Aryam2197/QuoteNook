<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuoteNooK</title>
    <link rel="stylesheet" href="../css/home.css">
</head>
<body>
    <header>
        <div class="header-container">
            <h1 class="title">QuoteNooK</h1>
        </div>
        
        <div class="email-title">
            <h1><%= username %></h1>
            <h1><%= email %></h1>
        </div>
        <form action="/logout" method="POST">
            <div class="logout">
                <button>Logout</button>
            </div>
        </form>   
        
        <h2 class="sub">Choose tag</h2>
    </header>
    <main>
        <div class="card-container">
            <div class="card" id="card1" data-tag="creativity">Creativity</div>
            <div class="card" id="card2" data-tag="life">Life</div>
            <div class="card" id="card3" data-tag="motivation">Motivation</div>
            <div class="card" id="card4" data-tag="spirituality">Spirituality</div>
            <div class="card" id="card5" data-tag="wisdom">Wisdom</div>
            <div class="card" id="card6" data-tag="nature">Nature</div>
            <div class="card" id="card7" data-tag="education">Education</div>
            <div class="card" id="card8" data-tag="happiness">Happiness</div>
            <div class="card" id="card9" data-tag="wellness">Wellness</div>
            <div class="card" id="card10" data-tag="science">Science</div>
        </div>
    </main>
    <footer>
        <button class="send-mail">Send</button>
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const cards = document.querySelectorAll(".card");
            const sendButton = document.querySelector(".send-mail");

            let selectedTag = null;

            cards.forEach(card => {
                card.addEventListener("click", function() {
                    // Remove the 'selected' class from all cards
                    cards.forEach(otherCard => {
                        if (otherCard !== card) {
                            otherCard.classList.remove("selected");
                        }
                    });

                    // Toggle the 'selected' class for the clicked card
                    card.classList.toggle("selected");
                    
                    // Set the selected tag
                    selectedTag = card.classList.contains("selected") ? card.dataset.tag : null;
                });
            });

            sendButton.addEventListener("click", function() {
                if (selectedTag) {
                    fetch('/send-quote', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ tag: selectedTag })
                    })
                    .then(response => {
                        if (response.ok) {
                            alert('Quote sent to your email!');
                        } else {
                            alert('Failed to send quote.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to send quote.');
                    });
                } else {
                    alert('Please select a tag first.');
                }
            });
        });

        //look at fixes in the Pen https://codepen.io/ghaste/pen/OJqLbvg
//for adding mouse trail to a page that scrolls beyond the viewport, as would be the case with most websites - lol
let x1=0, y1=0;
window.client
const 
  vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0),
  dist_to_draw = 50,
  delay = 1000,
  fsize = [
    '1.1rem', '1.4rem', '.8rem', '1.7rem'
  ],
  colors = [
  '#E23636',
  '#F9F3EE',
  '#E1F8DC',
  '#B8AFE6',
  '#AEE1CD',
  '#5EB0E5'
],
  rand = (min, max) => 
    Math.floor(Math.random() * (max - min + 1)) + min,
  selRand = (o) => o[rand(0, o.length -1)],
  distanceTo =  (x1, y1, x2, y2) => 
    Math.sqrt((Math.pow(x2-x1,2))+(Math.pow(y2-y1,2))),
  shouldDraw = (x, y) => 
    (distanceTo(x1, y1, x, y) >= dist_to_draw),
  addStr = (x, y) => {
    const str = document.createElement("div");
    str.innerHTML = '&#10022;';
    str.className = 'star';
    str.style.top = `${y + rand(-20,20)}px`;
    str.style.left = `${x}px`;
    str.style.color = selRand(colors);
    str.style.fontSize = selRand(fsize);
    document.body.appendChild(str);
    //console.log(rand(0, 3));
    const fs = 10 + 5 * parseFloat(getComputedStyle(str).fontSize);
    //console.log(vh, y, fs);
    //console.log((y+fs)>vh?vh-y:fs);
    str.animate({
      translate: `0 ${(y+fs)>vh?vh-y:fs}px`,
      opacity: 0,
      transform: `rotateX(${rand(1, 500)}deg) rotateY(${rand(1, 500)}deg)`
    }, {
      duration: delay,
      fill: 'forwards',

    });
    //could add a animation terminate listener, but why add the additional load
    setTimeout(() => {
        str.remove();
      }, delay);
  }

addEventListener("mousemove", (e) => {
  const {clientX, clientY} = e;
  if(shouldDraw(clientX, clientY)){
    addStr(clientX, clientY);
    x1 = clientX;
    y1 = clientY;
  }
});
    </script>
</body>
</html>
